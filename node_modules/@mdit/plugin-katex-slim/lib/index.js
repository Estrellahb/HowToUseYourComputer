import{createRequire as x}from"node:module";import{tex as y}from"@mdit/plugin-tex";const c=e=>e.replace(/&/gu,"&amp;").replace(/</gu,"&lt;").replace(/>/gu,"&gt;").replace(/"/gu,"&quot;").replace(/'/gu,"&#039;"),S=x(import.meta.url);let p=!0,l;try{l=(await import("katex")).default}catch{p=!1}const f=(e,t,o)=>{let r;try{r=l.renderToString(e,{...t,displayMode:!1})}catch(n){t.throwOnError&&console.warn(n),r=`<span class='katex-error' title='${c(n.toString())}'>${c(e)}</span>`}return o?.(r,!1)??r},$=(e,t,o)=>{let r;try{r=`<p class='katex-block'>${l.renderToString(e,{...t,displayMode:!0})}</p>
`}catch(n){t.throwOnError&&console.warn(n),r=`<p class='katex-block katex-error' title='${c(n.toString())}'>${c(e)}</p>
`}return o?.(r,!0)??r},I=(e,t={})=>{if(!p){console.error('[@mdit/plugin-katex]: "katex" not installed!');return}const{allowInlineWithSpace:o=!1,mathFence:r=!1,mhchem:n=!1,logger:m=a=>a==="newLineInDisplayMode"?"ignore":"warn",transformer:i,...g}=t;n&&S("katex/contrib/mhchem"),e.use(y,{allowInlineWithSpace:o,mathFence:r,render:(a,u,h)=>{const s={strict:(d,k,w)=>m(d,k,w,h)??"ignore",throwOnError:!1,...g};return u?$(a,s,i):f(a,s,i)}})};export{I as katex};
//# sourceMappingURL=index.js.map
